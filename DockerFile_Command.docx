-   FROM (used for base image)

-   RUN (to run command)
        
        - We can RUN in two format
            1.SHELL  // RUN apt update// -->> RUN CMD <options> <options>
            2.EXEC   // EXEC ["apt","update"] --> EXEC ["CMD","<options","<"options"]

            examples  :

                RUN apt update
                RUN apt install -y git curl sudo

                EXEC ["ls", "-l", "-r", "-t"]

'''

Docker prefers EXEC formate, but industry we write in SHELL format

'''

-   COPY  (used to copy files from local to image)

        Note: we need to calculate from build path, not from system path

            * Only folders and file but not compressed or links

        COPY <source_path_from_build_context> <destination_inside_image>

        examples  :

        1.  COPY test.txt /home/test.txt 
        2.  COPY ./demo/file1.txt /home/demo/file1.txt or /home/demo/file_to_container.txt

        to check this alway build image first and run container

        -   docker build -t  myub:latest .
        -   docker run -it -d --name mycon myub:latest
        -   docker exec -it  mycon /bin/bash

                                boot  etc  lib   media  opt  root  sbin  sys  usr
                                root@0a5f106e3033:/# cd home
                                root@0a5f106e3033:/home# ls
                                hack.txt  hack_test_renamed.txt  ubuntu
                                root@0a5f106e3033:/home# read escape sequence


-   ADD (used to copy files from local to image but)

        ADD supports extra source formats
            *If the source is a compressed file then ADD will automatically uncompress it in the destination.
            *If the source is a downloadable link then ADD will automatically download the file in the destination.

            example:  - ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.93/bin/apache-tomcat-9.0.93-deployer.tar.gz /home/


-   CMD vs ENTRYPOINT
        
        * Both CMD and ENTRYPOINT are used to define the default execution commandof the container (the command which will be executed in the container
            as mainprocess).
        * If we use multiple CMD or ENTRYPOINT in the same Dockerfile only the last one will be considered.

        * If we use both CMD and ENTRYPOINT in the same Dockerfile, then ENTRYPOINT gets the highest priority and the command defined using CMD will be
          asparameters to ENTRYPOINT.

        Difference

           - CMD can be completely overridden at the runtime (with docker run at the endwe can provide the command to override the CMD).
           - ENTRYPOINT can't be overridden at the runtime but the command passed at the runtime will become parameters to ENTRYPOINT command defined in Dockerfile.
            
            Syntax: we can define command in 2 ways

                1. shell format
                
                    CMD "ls -lrt"

                2. EXEC format

                    Always first element is command.
                    Except first element all the other elements are parameters to command.
                    
                    CMD ["ls","-lrt"]











